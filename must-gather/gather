#!/usr/bin/env bash

set -eu -o pipefail

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
declare -r SCRIPT_DIR

# shellcheck disable=SC1091
source "${SCRIPT_DIR}"/utils

declare OPERATOR_NS=""
declare OPERATOR=""
declare COLLECTION_DIR=""

declare OLM_INFO_DIR=""
declare INSTANCE_NS=""
declare INSTANCE_TYPE=""
declare KEPLER_OPERATOR_INFO_DIR=""

declare UWM_INFO_DIR=""
declare CA_BUNDLE=""
declare THANOS_RULER_ROUTE=""
declare SA_TOKEN=""
declare PROM_PODS=""

declare -r OPERATOR_NS_DEFAULT="openshift-operators"
declare -r OPERATOR_DEFAULT="kepler-operator"
declare -r COLLECTION_DIR_DEFAULT="/must-gather"
declare -r OPERATOR_DEPLOY_NAME="kepler-operator-controller"
declare -r LOGFILE_NAME="gather-debug.log"
declare -r UWM_NS="openshift-user-workload-monitoring"
declare -r KEPLER_INSTANCE="kepler"
declare -r POWER_MONITOR_INSTANCE="power-monitor"

declare SHOW_HELP=false

# Initialize global variables with defaults if they aren't already set
init_globals() {
	[[ -z "$OPERATOR_NS" ]] && {
		OPERATOR_NS="$OPERATOR_NS_DEFAULT"
	}
	[[ -z "$OPERATOR" ]] && {
		OPERATOR="$OPERATOR_DEFAULT"
	}
	[[ -z "$COLLECTION_DIR" ]] && {
		COLLECTION_DIR="$COLLECTION_DIR_DEFAULT"
	}
	return 0
}

# Initialize monitoring variables
init_monitoring() {
	THANOS_RULER_ROUTE="$(oc get routes -n $UWM_NS thanos-ruler -o jsonpath='{.status.ingress[0].host}')" || return 1
	SA_TOKEN="$(oc create token default)" || return 1
	PROM_PODS="$(oc -n $UWM_NS get pods -l app.kubernetes.io/component=prometheus -oname)" || return 1

	log "Successfully initialized monitoring variables"
	return 0
}

# Parse command line arguments
parse_args() {
	while [[ -n "${1+xxx}" ]]; do
		case $1 in
		-h | --help)
			SHOW_HELP=true
			return 0
			;;
		-n | --ns)
			shift
			OPERATOR_NS="$1"
			shift
			;;
		-o | --operator)
			shift
			OPERATOR="$1"
			shift
			;;
		-d | --dest-dir)
			shift
			COLLECTION_DIR="$1"
			shift
			;;
		*)
			return 1
			;;
		esac
	done
	return 0
}

# Print usage information
print_usage() {
	local scr
	scr="$(basename "$0")"

	read -r -d '' help <<-EOF_HELP || true
		Usage:
		  $scr
		  $scr  --ns | -n
		  $scr  --operator | -o
		  $scr  --dest-dir | -d


		 ─────────────────────────────────────────────────────────────────

		Options:
		  --operator | -op     specify the name of operator that is deployed
		                          default: $OPERATOR_DEFAULT
		  --ns | -n            namespace where the operator is deployed
			                          default: $OPERATOR_NS_DEFAULT
		  --dest-dir | -d      gather collection path
			                          default: $COLLECTION_DIR_DEFAULT

	EOF_HELP

	echo -e "$help"
	return 0
}

# Get internal instances
get_internal_instances() {
	local instance_type="$1"
	local instance_name="$2"
	shift 2

	log "Getting $instance_type internal instance(s)"

	oc get "${instance_type}internals" "$instance_name" >/dev/null || {
		log "No $instance_type internals found; skipping gathering $instance_type"
		return 0
	}
	run oc get "${instance_type}internals" "$instance_name" -oyaml "$COLLECTION_DIR/$instance_type-internals.yaml"
}

# Get instance
get_instance() {
	local instance_type="$1"
	local instance_name="$2"
	shift 2

	log "Getting $instance_type instance(s)"

	oc get "$instance_type" "$instance_name" >/dev/null || {
		log "No $instance_type found; skipping gathering $instance_type"
		return 0
	}

	# Different jsonpath for different instance type
	local jsonpath="{.spec.exporter.deployment.namespace}"
	[[ "$instance_type" == "powermonitor" ]] && {
		jsonpath="{.spec.kepler.deployment.namespace}"
	}

	# Get instance namespace from internals
	INSTANCE_NS=$(oc get "${instance_type}internals" "$instance_name" -o jsonpath="$jsonpath")
	INSTANCE_TYPE="$instance_name"

	run oc get "$instance_type" -oyaml "$COLLECTION_DIR/${instance_type}s.yaml"
}

# Get event information
get_events() {
	log "Getting $INSTANCE_NS events"
	run oc -n "$INSTANCE_NS" get events "$COLLECTION_DIR/$INSTANCE_NS""_events"
}

# Get daemon set information
get_daemon_set() {
	log "Getting $INSTANCE_TYPE exporter daemonset"
	run oc -n "$INSTANCE_NS" get ds "$INSTANCE_TYPE" -oyaml "$COLLECTION_DIR/$INSTANCE_TYPE-ds.yaml"
}

# Get config map information
get_config_map() {
	log "Getting $INSTANCE_TYPE exporter config map"
	run oc -n "$INSTANCE_NS" get cm "$INSTANCE_TYPE" -oyaml "$COLLECTION_DIR/$INSTANCE_TYPE-cm.yaml"
}

# Get service account information
get_sa() {
	log "Getting $INSTANCE_TYPE exporter service account"
	run oc -n "$INSTANCE_NS" get serviceaccount "$INSTANCE_TYPE" -oyaml "$COLLECTION_DIR/$INSTANCE_TYPE-sa.yaml"
}

# Get scc information
get_scc() {
	log "Getting $INSTANCE_TYPE exporter scc"
	run oc get scc "$INSTANCE_TYPE" -oyaml "$COLLECTION_DIR/$INSTANCE_TYPE-scc.yaml"
}

# Get pod information
get_pods() {
	local component_pod="$1"
	local component_node_info_dir="$2"
	shift 2

	log "Getting pod yaml for $INSTANCE_TYPE pod: $component_pod"

	run oc -n "$INSTANCE_NS" get pod "$component_pod" -oyaml "$component_node_info_dir/$INSTANCE_TYPE-pod.yaml"
}

# Get cpuid information
get_cpuid() {
	local component_pod="$1"
	local component_node_info_dir="$2"
	shift 2

	log "Getting information from \"cpuid\" from $INSTANCE_TYPE pod: $component_pod"
	run oc -n "$INSTANCE_NS" exec "$component_pod" -c "$INSTANCE_TYPE" -- cpuid -1 "$component_node_info_dir/node-cpuid-info"
}

# Get environment variables
get_env_var() {
	local component_pod="$1"
	local component_node_info_dir="$2"
	shift 2

	log "Getting environment variables from $INSTANCE_TYPE pod: $component_pod"
	run oc -n "$INSTANCE_NS" exec "$component_pod" -c "$INSTANCE_TYPE" -- env "$component_node_info_dir/env-variables"
}

# Get kernel information
get_kernel_info() {
	local component_pod="$1"
	local component_node_info_dir="$2"
	shift 2

	log "Getting kernel version from $INSTANCE_TYPE pod: $component_pod"
	echo "kernel version:" >>"$component_node_info_dir/kernel-info"
	run oc -n "$INSTANCE_NS" exec "$component_pod" -c "$INSTANCE_TYPE" -- uname -a "$component_node_info_dir/kernel-info"
}

# Get ebpf information
get_ebpf_info() {
	local component_pod="$1"
	local component_node_info_dir="$2"
	shift 2

	log "Getting ebpf information from $INSTANCE_TYPE pod: $component_pod"

	echo "Probing the running kernel and dumping the number of eBPF-related parameters"
	echo "ebpf related features supported by current kernel:" >>"$component_node_info_dir/kernel-ebpf-features"
	run oc -n "$INSTANCE_NS" exec "$component_pod" -c "$INSTANCE_TYPE" -- bpftool feature probe kernel "$component_node_info_dir/kernel-ebpf-features"

	echo "listing all loaded ebpf programs"
	echo "list of all loaded ebpf programs:" >>"$component_node_info_dir/ebpf-info"
	run oc -n "$INSTANCE_NS" exec "$component_pod" -c "$INSTANCE_TYPE" -- bpftool prog list "$component_node_info_dir/ebpf-info"

	echo "listing all ebpf maps"
	echo "list of all ebpf maps:" >>"$component_node_info_dir/ebpf-info"
	run oc -n "$INSTANCE_NS" exec "$component_pod" -c "$INSTANCE_TYPE" -- bpftool map list "$component_node_info_dir/ebpf-info"

}

# Get pod logs
get_pod_logs() {
	local component_pod="$1"
	local component_node_info_dir="$2"
	shift 2

	log "Getting logs from $INSTANCE_TYPE pod: $component_pod"
	run oc -n "$INSTANCE_NS" logs "$component_pod" -c "$INSTANCE_TYPE" "$component_node_info_dir/$INSTANCE_TYPE.log"
}

# Gather exporter information
gather_exporter_info() {
	[[ -z "$INSTANCE_NS" ]] && {
		log "no $INSTANCE_TYPE found; skipping gathering $INSTANCE_TYPE exporter info"
		return 0
	}

	log "Gathering exporter information for $INSTANCE_TYPE in namespace $INSTANCE_NS"

	# Get resource information
	get_events
	get_daemon_set
	get_config_map
	get_sa
	get_scc

	# Gather pod-specific information
	local component_pods=""
	local component_pod_info_dir=""

	# Get all pods in the component namespace
	component_pods=$(oc -n "$INSTANCE_NS" get pods -oname 2>/dev/null || echo "")

	log "Found $(echo "$component_pods" | wc -w) pods in namespace $INSTANCE_NS"
	for pod in $component_pods; do
		pod=$(echo "$pod" | awk -F '/' '{print $2}')
		log "Gathering information for $INSTANCE_TYPE pod: $pod"

		component_pod_info_dir="$COLLECTION_DIR/$INSTANCE_TYPE-info/$pod"
		mkdir -p "$component_pod_info_dir"

		# Gather pod information
		get_pods "$pod" "$component_pod_info_dir"
		get_cpuid "$pod" "$component_pod_info_dir"
		get_env_var "$pod" "$component_pod_info_dir"
		get_kernel_info "$pod" "$component_pod_info_dir"
		get_ebpf_info "$pod" "$component_pod_info_dir"
		get_pod_logs "$pod" "$component_pod_info_dir"

		log "Completed gathering information for pod: $pod"
	done

	log "Completed gathering exporter information for $INSTANCE_TYPE"
}

# Get OLM information
get_olm() {
	log "Collecting olm info for $OPERATOR"
	run oc -n "$OPERATOR_NS" get olm -l "operators.coreos.com/$OPERATOR.$OPERATOR_NS"= \
		-oyaml "$OLM_INFO_DIR/$OPERATOR-olm-resources.yaml"
}

# Get OLM summary
get_summary() {
	log "Collecting olm summary"
	run oc -n "$OPERATOR_NS" get olm -owide "$OLM_INFO_DIR/summary.txt"
}

# Gather OLM information
gather_olm_info() {
	log "Running gather script for olm"

	OLM_INFO_DIR="$COLLECTION_DIR/olm-info"
	mkdir -p "$OLM_INFO_DIR"

	get_olm
	get_summary
}

# Get catalogsource information
get_catalogsource() {
	log "Getting catalogsource info for $OPERATOR"
	run oc -n "$OPERATOR_NS" get catalogsource \
		"$OPERATOR-catalog" -oyaml "$KEPLER_OPERATOR_INFO_DIR/$OPERATOR-catalogsource.yaml"
}

# Get subscription information
get_subscription() {
	log "Getting subscription info for $OPERATOR"
	run oc -n "$OPERATOR_NS" get subscription \
		-l operators.coreos.com/"$OPERATOR"."$OPERATOR_NS"= \
		-oyaml "$KEPLER_OPERATOR_INFO_DIR/$OPERATOR-subscription.yaml"
}

# Get installplan information
get_install_plan() {
	log "Getting installplan info for $OPERATOR"
	run oc -n "$OPERATOR_NS" get installplan \
		-l operators.coreos.com/"$OPERATOR"."$OPERATOR_NS"= \
		-oyaml "$KEPLER_OPERATOR_INFO_DIR/$OPERATOR-installplan.yaml"
}

# Get CSV information
get_csv() {
	log "Getting CSV for $OPERATOR"
	run oc -n "$OPERATOR_NS" get csv \
		-l operators.coreos.com/"$OPERATOR"."$OPERATOR_NS"= \
		-oyaml "$KEPLER_OPERATOR_INFO_DIR/$OPERATOR-csv.yaml"
}

# Get Operator deployment information
get_kepler_operator_deployment_info() {
	log "Getting deployment info for $OPERATOR"
	run oc -n "$OPERATOR_NS" get deployment \
		"$OPERATOR_DEPLOY_NAME" -oyaml "$KEPLER_OPERATOR_INFO_DIR/$OPERATOR-deployment.yaml"
}

# Get Operator pod information
get_kepler_operator_pod_info() {
	log "Getting pod info for $OPERATOR"
	run oc -n "$OPERATOR_NS" get pod \
		-l app.kubernetes.io/component=manager \
		-l app.kubernetes.io/part-of="kepler-operator" \
		-oyaml "$KEPLER_OPERATOR_INFO_DIR/$OPERATOR.yaml"
}

# Get Operator log
get_kepler_operator_log() {
	log "Getting pod log for $OPERATOR"
	run oc -n "$OPERATOR_NS" logs deployment/"$OPERATOR_DEPLOY_NAME" "$KEPLER_OPERATOR_INFO_DIR/$OPERATOR.log"
}

# Get Operator summary
get_operator_summary() {
	run oc -n "$OPERATOR_NS" get catalogsource \
		"$OPERATOR-catalog" -owide "$KEPLER_OPERATOR_INFO_DIR/summary.txt"
	echo -e "\n" >>"$KEPLER_OPERATOR_INFO_DIR/summary.txt"

	run oc -n "$OPERATOR_NS" get subscription -owide "$KEPLER_OPERATOR_INFO_DIR/summary.txt"
	echo -e "\n" >>"$KEPLER_OPERATOR_INFO_DIR/summary.txt"

	run oc -n "$OPERATOR_NS" get installplan -owide "$KEPLER_OPERATOR_INFO_DIR/summary.txt"
	echo -e "\n" >>"$KEPLER_OPERATOR_INFO_DIR/summary.txt"

	run oc -n "$OPERATOR_NS" get csv -owide "$KEPLER_OPERATOR_INFO_DIR/summary.txt"
	echo -e "\n" >>"$KEPLER_OPERATOR_INFO_DIR/summary.txt"

	run oc -n "$OPERATOR_NS" get deployment \
		"$OPERATOR_DEPLOY_NAME" -owide "$KEPLER_OPERATOR_INFO_DIR/summary.txt"
	echo -e "\n" >>"$KEPLER_OPERATOR_INFO_DIR/summary.txt"

	run oc -n "$OPERATOR_NS" get pod \
		-l app.kubernetes.io/component=manager \
		-l app.kubernetes.io/part-of="kepler-operator" \
		-owide "$KEPLER_OPERATOR_INFO_DIR/summary.txt"
}

# Gather Operator information
gather_operator_info() {
	log "Getting $OPERATOR info"

	KEPLER_OPERATOR_INFO_DIR="$COLLECTION_DIR/$OPERATOR-info"
	mkdir -p "$KEPLER_OPERATOR_INFO_DIR"

	get_subscription
	get_catalogsource
	get_install_plan
	get_csv
	get_kepler_operator_deployment_info
	get_kepler_operator_pod_info
	get_kepler_operator_log
	get_operator_summary
}

# Get prometheus rules
get_rules() {
	log "Getting prometheus rules"
	run oc -n openshift-config-managed get cm default-ingress-cert -o jsonpath='{.data.ca-bundle\.crt}' "${CA_BUNDLE}"
	run oc get --certificate-authority="${CA_BUNDLE}" \
		--token="${SA_TOKEN}" --server="https://${THANOS_RULER_ROUTE}" \
		--raw="/api/v1/rules" "${UWM_INFO_DIR}/rules.json"
}

# Get prometheus object from replica
get_from_prom_replica() {
	local replica="$1"
	shift
	local object="$1"
	shift
	local path="${1:-$object}"
	shift || true

	local result_path="${UWM_INFO_DIR}/${path}"
	mkdir -p "$(dirname "${result_path}")"
	run oc exec "${replica}" \
		-c prometheus \
		-n $UWM_NS \
		-- curl -sG "http://localhost:9090/api/v1/${object}" \
		"${result_path}.json"
}

# Get prometheus objects from replicas
get_from_prom_replicas() {
	local object="$1"
	shift
	local path="${1:-$object}"
	shift || true

	for pod in ${PROM_PODS}; do
		pod=$(echo "$pod" | awk -F '/' '{print $2}')
		log "getting ${object} from prometheus pod: ${pod}"
		get_from_prom_replica "${pod}" "${object}" "${pod}/${path}"
	done
}

# Gather monitoring information
gather_monitoring_info() {
	log "Getting monitoring info"

	UWM_INFO_DIR="${COLLECTION_DIR}/uwm-info"
	CA_BUNDLE="${UWM_INFO_DIR}/ca-bundle.crt"
	mkdir -p "${UWM_INFO_DIR}"

	get_rules
	get_from_prom_replicas status/runtimeinfo
	get_from_prom_replicas status/config
	get_from_prom_replicas 'targets?state=active' active-targets
	get_from_prom_replicas status/tsdb
}

# Check if instance exists in the cluster
component_exists() {
	local instance_type="$1"
	local instance_name="$2"
	shift 2

	oc get "${instance_type}internals" "$instance_name" >/dev/null 2>&1 && return 0
	return 1
}

main() {
	# Parse command line arguments
	parse_args "$@" || {
		print_usage
		echo "error: parsing args failed"
		return 1
	}

	# Show help if requested
	$SHOW_HELP && {
		print_usage
		return 0
	}

	# Initialize global variables
	init_globals

	# Create collection directory
	# NOTE: convert relative to absolute path
	COLLECTION_DIR="$(readlink -f "$COLLECTION_DIR")"
	export LOGFILE_PATH="${COLLECTION_DIR}/${LOGFILE_NAME}"

	mkdir -p "${COLLECTION_DIR}"
	cd "${COLLECTION_DIR}"
	echo -e "must-gather logs are located at: '${LOGFILE_PATH}'"

	mkdir -p "/tmp/cache-dir"
	export KUBECACHEDIR=/tmp/cache-dir

	echo "$OPERATOR must-gather started..."

	# Gather operator and OLM information
	gather_olm_info
	gather_operator_info

	# Check and process available components
	component_exists "kepler" "$KEPLER_INSTANCE" && {
		get_internal_instances "kepler" "$KEPLER_INSTANCE"
		get_instance "kepler" "$KEPLER_INSTANCE"
		gather_exporter_info
	}

	component_exists "powermonitor" "$POWER_MONITOR_INSTANCE" && {
		get_internal_instances "powermonitor" "$POWER_MONITOR_INSTANCE"
		get_instance "powermonitor" "$POWER_MONITOR_INSTANCE"
		gather_exporter_info
	}

	# Gather monitoring information if available
	if init_monitoring; then
		gather_monitoring_info
	else
		log "cannot gather UWM details; skipping gathering monitoring info"
	fi

	log "$OPERATOR must-gather completed successfully"
	echo "$OPERATOR must-gather completed"
	return 0
}

main "$@"
