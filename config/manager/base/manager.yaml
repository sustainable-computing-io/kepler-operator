apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/name: namespace
    app.kubernetes.io/instance: system
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: kepler-operator
    app.kubernetes.io/part-of: kepler-operator
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  namespace: system
  labels:
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/part-of: kepler-operator
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: controller-manager
      app.kubernetes.io/component: manager
      app.kubernetes.io/part-of: kepler-operator
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        app.kubernetes.io/instance: controller-manager
        app.kubernetes.io/component: manager
        app.kubernetes.io/part-of: kepler-operator
    spec:
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
        - command:
            - /manager
          env:
            - name: RELATED_IMAGE_KEPLER
              value: "<KEPLER_IMG>"
            - name: RELATED_IMAGE_KUBE_RBAC_PROXY
              value: "<KUBE_RBAC_PROXY_IMG>"
          args:
            - --leader-elect
            - --kepler.image=$(RELATED_IMAGE_KEPLER)
            - --kube-rbac-proxy.image=$(RELATED_IMAGE_KUBE_RBAC_PROXY)
            - --zap-log-level=5
          image: "<OPERATOR_IMG>"
          imagePullPolicy: IfNotPresent
          name: manager
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 20
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 20
            periodSeconds: 20
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          ports:
            - containerPort: 8080
              protocol: TCP
              name: metrics
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
