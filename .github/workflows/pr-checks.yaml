name: pr-checks

on: # yamllint disable-line rule:truthy
  pull_request:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.filter.outputs.changes }}
    steps:
      - name: checkout source
        uses: actions/checkout@v4

      - name: filter changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            changes:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
  docs:
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@main

      - uses: actions/setup-go@main
        with:
          go-version-file: go.mod

      - name: Install all tools
        uses: ./.github/tools-cache

      - name: make docs
        run: |
          make docs
          git diff --exit-code

  fmt:
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@main

      - uses: actions/setup-go@main
        with:
          go-version-file: go.mod

      - name: Install all tools
        uses: ./.github/tools-cache

      - name: make fmt
        run: make fmt && git diff --exit-code

  vet:
    needs: check-changes
    if: needs.check-changes.outputs.changes == 'true'
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@main

      - uses: actions/setup-go@main
        with:
          go-version-file: go.mod

      - name: Install all tools
        uses: ./.github/tools-cache

      - name: make vet
        run: make vet && git diff --exit-code

  escapes_detect:
    needs: check-changes
    if: needs.check-changes.outputs.changes == 'true'
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@main

      - uses: actions/setup-go@main
        with:
          go-version-file: go.mod

      - name: Install all tools
        uses: ./.github/tools-cache

      - name: run escapes detect
        run: make escapes_detect

  golangci:
    needs: check-changes
    if: needs.check-changes.outputs.changes == 'true'
    permissions:
      contents: read
      # NOTE: allow read access to pull request. Use with `only-new-issues` option.
      pull-requests: read

    runs-on: ubuntu-latest-8-cores
    steps:
      - name: code checkout
        uses: actions/checkout@v3
      - uses: actions/setup-go@main
        with:
          go-version-file: go.mod
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53
          args: --timeout=3m --issues-exit-code=0 ./...
          only-new-issues: true

  vulnerability_detect:
    needs: check-changes
    if: needs.check-changes.outputs.changes == 'true'
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-go@main
        with:
          go-version-file: go.mod

      - name: Install all tools
        uses: ./.github/tools-cache

      - name: run vulnerability detect
        run: make check-govuln

  pre-commit:
    runs-on: ubuntu-latest-8-cores
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3

      - name: Setup Pre-Commit
        uses: pre-commit/action@v3.0.1

  test-and-codecov:
    needs: check-changes
    if: needs.check-changes.outputs.changes == 'true'
    uses: ./.github/workflows/test-and-codecov.yaml
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  bundle:
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-go@main
        with:
          go-version-file: go.mod
      - name: Install all tools
        uses: ./.github/tools-cache

      - name: bundle
        run: |
          make generate manifests bundle
          git diff --exit-code

  build-images:
    runs-on: ubuntu-latest-16-cores
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@main
        with:
          go-version-file: go.mod

      - uses: ./.github/compute-version
        id: version

      - name: additional image tags
        id: additional_tags
        shell: bash
        run: |
          echo "result=$(git rev-parse --short HEAD),v1alpha1" >> $GITHUB_OUTPUT

      - name: Install all tools
        uses: ./.github/tools-cache

      - name: build images for PR checks
        uses: ./.github/publish-images
        with:
          image_registry: localhost:5001
          version: ${{ steps.version.outputs.version }}
          additional_tags: ${{ steps.additional_tags.outputs.result }}

  operator-upgrade:
    needs: [build-images, bundle]
    env:
      KIND_VERSION: 0.15.0
      GO111MODULE: on
      OPERATOR_IMAGE: quay.io/sustainable_computing_io/kepler-operator
      KUBECONFIG: /tmp/.kube/config
      KIND_WORKER_NODES: 2

    runs-on: ubuntu-latest-16-cores
    steps:
      - uses: actions/checkout@v3
        with:
          go-version-file: go.mod

      - name: Install Go
        uses: actions/setup-go@main
        with:
          go-version-file: go.mod

      - name: Install all tools
        uses: ./.github/tools-cache

      - name: use kepler action for kind cluster build
        uses: sustainable-computing-io/kepler-action@v0.0.5
        with:
          ebpfprovider: libbpf
          cluster_provider: kind
        env:
          PROMETHEUS_ENABLE: "false"

      - name: Ensure cluster is able to run OLM bundles
        run: make cluster-prereqs

      - uses: ./.github/compute-version
        id: version

      - name: Run Operator Upgrade
        shell: bash
        run: |
          ./tests/run-e2e.sh upgrade
        env:
          VERSION: ${{ steps.version.outputs.version }}

      - name: Capture cluster state
        if: always()
        shell: bash
        run: |
          # Capture apiserver state
          # TODO: enable this when we have oc installed as part of `make tools`
          # oc adm inspect node --dest-dir cluster-state || true
          # oc adm inspect -A statefulset --dest-dir cluster-state || true
          # oc adm inspect -A deployment --dest-dir cluster-state || true
          # oc adm inspect -A ns --dest-dir cluster-state || true
          cp -r tmp/e2e cluster-state/ || true

      - name: Archive production artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cluster-state
          path: cluster-state

  e2e:
    needs: [build-images, bundle]
    env:
      KIND_VERSION: 0.15.0
      GO111MODULE: on
      OPERATOR_IMAGE: quay.io/sustainable_computing_io/kepler-operator
      KUBECONFIG: /tmp/.kube/config
      KIND_WORKER_NODES: 2
    name: e2e
    runs-on: ubuntu-latest-16-cores
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@main
        with:
          go-version-file: go.mod

      - name: Install all tools
        uses: ./.github/tools-cache

      - name: use kepler action for kind cluster build
        uses: sustainable-computing-io/kepler-action@v0.0.5
        with:
          ebpfprovider: libbpf
          cluster_provider: kind
        env:
          PROMETHEUS_ENABLE: "false"

      - name: Ensure cluster is able to run OLM bundles
        run: make cluster-prereqs

      - uses: ./.github/compute-version
        id: version

      - name: Run e2e tests
        run: |
          ./tests/run-e2e.sh e2e --ci --enable-vm-test
        env:
          VERSION: ${{ steps.version.outputs.version }}

      - name: Capture cluster state
        if: always()
        shell: bash
        run: |
          # Capture apiserver state
          # TODO: enable this when we have oc installed as part of `make tools`
          # oc adm inspect node --dest-dir cluster-state || true
          # oc adm inspect -A statefulset --dest-dir cluster-state || true
          # oc adm inspect -A deployment --dest-dir cluster-state || true
          # oc adm inspect -A ns --dest-dir cluster-state || true
          cp -r tmp/e2e cluster-state/ || true

      - name: Archive production artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cluster-state
          path: cluster-state
